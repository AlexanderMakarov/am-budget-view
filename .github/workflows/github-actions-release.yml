name: build-release-binaries
run-name: CI/CD

on:
  pull_request:
  push:
    branches:
    - master
    - fix_ci
    tags:
    - '*'

jobs:

  # Job to run always when CI is triggered.
  check_code:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Dump env
        run: env | sort

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "GITHUB_CONTEXT=$GITHUB_CONTEXT"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '^1.22.6'

      - name: Get dependencies
        run: go get -v -t -d

      - name: Lint
        run: go vet ./...

      - name: Test
        run: go test ./...

  # Job to build artifacts only if tag was pushed.
  build:
    needs: check_code
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    # Run concurrently for all major OS-es and architectures.
    strategy:
      matrix:
        os: [windows, darwin, linux]
        arch: [amd64, arm64]

    steps:
      # 3 steps below are lazily copy-pasted from the job above. See https://stackoverflow.com/a/71570847/1535127.
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get all tags, needed to get git log.

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '^1.22.6'

      - name: Get dependencies
        run: go get -v -t -d ./... # Will use cached dependencies.

      - name: Assemble version and release notes from commit messages
        id: vars
        run: |
          version=`date +'%Y/%m/%d_%H:%M:%S'`"_${GITHUB_REF_NAME}"
          curtag=${GITHUB_REF_NAME}
          prevtag=`git describe --tags --abbrev=0 HEAD^1`

          echo "Release: ${curtag}" > body.log
          echo "" >> body.log
          # Extract and add the tag message/annotation.
          git tag -n99 --format='%(contents)' ${curtag} >> body.log
          echo "" >> body.log
          echo "Changes since previous release:" >> body.log
          if git tag | grep ${prevtag} ; then
            git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
          else
            git log --pretty="- %s" -q --no-color >> body.log
          fi
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Print resulting information
        run: |
          echo version is ${{ steps.vars.outputs.version }}
          cat body.log

      - name: Build Binaries
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -o am-budget-view-${{ matrix.os }}-${{ matrix.arch }} \
            -ldflags "-X main.Version=${{ steps.vars.outputs.version }}"
          chmod a+x am-budget-view-*

      - name: Save Version and Binaries
        id: save_info
        run: |
          echo "${{ steps.vars.outputs.version }}" > version.txt
          # Idea here that the last `ls` would overwrite content with all files list.
          ls am-budget-view-*  # For debugging.
          echo "binaries=$(ls am-budget-view-*)" >> $GITHUB_OUTPUT
          # For debugging.
          echo "GITHUB_OUTPUT=$GITHUB_OUTPUT"
          cat ${GITHUB_OUTPUT} || true

      - name: Upload Binaries and Release data to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: data-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            version.txt
            body.log
            ${{ steps.save_info.outputs.binaries }}

  # Job to prepare artifacts only if they were built.
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Info Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Read Version and Binaries
        run: |
          ls -R artifacts
          echo "version=$(cat artifacts/*/version.txt | head -n 1)" >> $GITHUB_ENV
          # Use only one body.log file (they should all be identical)
          cp $(find artifacts -name body.log | head -n 1) body.log
          find artifacts -name "am-budget-view-*" -exec cp {} . \;

      - name: Make Release in repo
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.version }}
          bodyFile: "body.log"
          token: ${{ secrets.GHACTIONS_PUBLIC_REPO_RW }} # Note that it is custom PAT which expires.
          artifacts: "am-budget-view-*"
